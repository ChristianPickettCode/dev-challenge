{"version":3,"sources":["../../../../HACKMCGILL-CPICKETT/client/src/logo.svg","../../../../HACKMCGILL-CPICKETT/client/src/components/FormComp.js","../../../../HACKMCGILL-CPICKETT/client/src/components/Admin.js","../../../../HACKMCGILL-CPICKETT/client/src/App.js","../../../../HACKMCGILL-CPICKETT/client/src/serviceWorker.js","../../../../HACKMCGILL-CPICKETT/client/src/index.js"],"names":["module","exports","__webpack_require__","p","FormComp","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSubmitClick","e","preventDefault","state","email","match","fetch","method","headers","Content-Type","body","JSON","stringify","then","res","json","data","console","log","setState","valid","success","failed","onInputChange","target","value","react_default","a","createElement","FormGroup","row","Col","sm","Input","type","name","id","placeholder","onChange","Alert","color","hidden","check","Button","onClick","Component","Admin","_this2","Container","Table","map","info","scope","findIndex","x","date","dist_default","format","App","response","assign","reverse","dbData","_this3","react_router_dom","className","react_router","exact","path","render","style","width","marginTop","components_FormComp","components_Admin","Boolean","window","location","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0d1f23ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\n\nimport { FormGroup, Label, Input, Col, Button, Alert } from \"reactstrap\";\n\nclass FormComp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: \"\",\n      valid: true,\n      success: false,\n      failed: false\n    };\n  }\n  onSubmitClick = e => {\n    // Prevent form default actions\n    e.preventDefault();\n\n    // Validate Email with regex\n    let validEmail = this.state.email.match(\n      /^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i\n    );\n\n    if (validEmail) {\n      // Call api for POST\n      fetch(\"/api/form\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ email: this.state.email })\n      })\n        .then(res => res.json())\n        .then(data => {\n          console.log(data);\n          // If successfully inserted email to db\n          if (data.email) {\n            // Clear input and present success alert\n            this.setState({\n              email: \"\"\n            });\n            this.setState({ valid: true, success: true });\n          } else {\n            this.setState({ failed: true });\n            this.setState({ success: false });\n          }\n        });\n    } else {\n      this.setState({ valid: false });\n      this.setState({ success: false });\n    }\n  };\n  onInputChange = e => {\n    this.setState({\n      email: e.target.value\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <FormGroup row>\n          {/* <Label for=\"exampleEmail\" sm={2}>\n            Email\n          </Label> */}\n          <Col sm={12}>\n            <Input\n              type=\"email\"\n              name=\"email\"\n              id=\"exampleEmail\"\n              placeholder=\"Enter email...\"\n              onChange={this.onInputChange}\n              value={this.state.email}\n            />\n          </Col>\n        </FormGroup>\n        <Alert color=\"success\" hidden={!this.state.success}>\n          Successfully submitted email\n        </Alert>\n        <Alert color=\"danger\" hidden={this.state.valid}>\n          Invalid Email\n        </Alert>\n        <Alert color=\"danger\" hidden={!this.state.failed}>\n          Failed sumbitted email, please try again\n        </Alert>\n        <FormGroup check row>\n          <Button onClick={this.onSubmitClick}>Submit</Button>\n        </FormGroup>\n      </div>\n    );\n  }\n}\n\nexport default FormComp;\n","import React, { Component } from \"react\";\nimport { Table, Container } from \"reactstrap\";\nimport Moment from \"react-moment\";\n\nclass Admin extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    console.log(this.props.data);\n    return (\n      <Container>\n        <br />\n        <h1>\n          <b>Admin - Email Database</b>\n        </h1>\n        <Table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Email</th>\n              <th>Date</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.props.data\n              ? this.props.data.map(info => {\n                  return (\n                    <tr>\n                      <th scope=\"row\">\n                        {this.props.data.findIndex(x => x.date === info.date) +\n                          1}\n                      </th>\n                      <td>{info.email}</td>\n                      <td>\n                        <Moment format=\"MMM Do YYYY, h:mm a\">\n                          {info.date}\n                        </Moment>\n                      </td>\n                    </tr>\n                  );\n                })\n              : \"\"}\n          </tbody>\n        </Table>\n      </Container>\n    );\n  }\n}\n\nexport default Admin;\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport FormComp from \"./components/FormComp\";\nimport Admin from \"./components/Admin\";\n\nimport { Container } from \"reactstrap\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  componentDidMount() {\n    fetch(\"/api/form\")\n      .then(response => response.json())\n      .then(data => {\n        // Reverse data array\n        let copyArr = Object.assign({}, data);\n        data.reverse();\n\n        this.setState({ dbData: data });\n      });\n  }\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Route\n            exact\n            path=\"/\"\n            render={props => {\n              return (\n                <Container style={{ width: \"60%\", marginTop: \"20%\" }}>\n                  <h1>McHacks</h1>\n                  <FormComp />\n                </Container>\n              );\n            }}\n          />\n\n          <Route\n            path=\"/admin\"\n            render={props => {\n              return <Admin {...props} data={this.state.dbData} />;\n            }}\n          />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}